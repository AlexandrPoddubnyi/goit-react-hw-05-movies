{"version":3,"file":"static/js/746.92165724.chunk.js","mappings":"6MAGaA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,aAAaC,EAAmB,EAAnBA,aAExDC,EADY,kCACOJ,EAIvB,OAHoB,OAAhBA,IACFI,EAAS,2DAGT,iCACE,0BAAKH,EAAM,IAAEE,EAAaE,MAAM,EAAE,OAClC,gBAAKC,IAAKF,EAAQG,IAAKN,KACvB,yBAAG,WAASC,OAGjB,ECTYM,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,UACGF,GAAUA,EAAOG,KAAI,gBAAEC,EAAF,EAAEA,GAAIZ,EAAN,EAAMA,MAAOC,EAAb,EAAaA,aAAcF,EAA3B,EAA2BA,YAAaG,EAAxC,EAAwCA,aAAxC,OAClB,0BACE,SAAC,KAAD,CAAMW,GAAE,kBAAaD,GAAME,MAAO,CAAEC,KAAMN,GAA1C,UACA,SAACX,EAAD,CAAYE,MAAOA,EAAOD,YAAaA,EAAaE,aAAcA,EAAcC,aAAcA,OAFtFU,EADQ,KAS3B,C,4HCeD,EA9BkB,SAAC,GAAkB,IAAhBI,EAAe,EAAfA,SAEnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,WAAS,kCAAMF,EAAaG,IAAI,eAAvB,QAAkC,EAAlC,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAeA,OACE,kBAAMC,OAAO,GAAGR,SAXG,SAAAS,GACnBA,EAAMC,iBACgB,KAAlBJ,EAAOK,SAGXX,EAASM,GACTH,EAAgB,CAAES,MAAON,IACzBC,EAAU,IACX,EAGC,WACE,kBAAOM,KAAK,OAAOC,KAAK,SAASC,SAdpB,SAAAC,GAAC,OAAIT,EAAUS,EAAEC,OAAOC,MAAvB,EAcuCA,MAAOZ,EAAQa,aAAa,MAAMC,WAAS,EAACC,YAAY,mBAC7G,mBAAQR,KAAK,SAAb,SAAsB,aAG3B,E,SCoBD,EA1Ce,WAEb,OAAuBZ,EAAAA,EAAAA,MAAhBC,GAAP,eACA,GAA4BE,EAAAA,EAAAA,WAAS,kCAAMF,EAAaG,IAAI,gBAAvB,QAAmC,EAAnC,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BH,EAAAA,EAAAA,UAAS,MAArC,eAAOZ,EAAP,KAAe8B,EAAf,KA8BA,OAXAC,EAAAA,EAAAA,YAAU,WACO,KAAXjB,IAGJkB,EAAAA,EAAAA,IAAoBlB,GAAQmB,MAAK,SAAAC,GAC/BJ,GAAU,OAAII,GACf,GACF,GAAE,CAACpB,KAKF,6BACE,SAAC,EAAD,CAAWN,SArBM,SAAA2B,GACnB,GAAmB,KAAfA,EACF,OAAOC,MAAM,+HAEfrB,EAAUoB,EACX,KAiBG,SAACpC,EAAA,EAAD,CAAYC,OAAQA,MAGzB,C","sources":["components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import PropTypes from \"prop-types\";\n\n\nexport const MoviesItem = ({ poster_path, title, vote_average,release_date }) => {\n  const postImg = 'https://image.tmdb.org/t/p/w500';\n  let imgUrl = postImg + poster_path;\n  if (poster_path === null) {\n    imgUrl = 'https://i.postimg.cc/MTBLYYMP/poster-not-available.jpg';\n  }\n  return (\n    <>\n      <h1>{title} {release_date.slice(0,4)}</h1> \n      <img src={imgUrl} alt={title} />\n      <p>Rating: {vote_average}</p>\n    </>\n );\n};\n\n\nMoviesItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n  poster_path: PropTypes.string,\n};","import { Container } from \"components/App.styled\"\nimport { Link, useLocation } from \"react-router-dom\";\nimport { MoviesItem } from \"../MoviesItem/MoviesItem\";\nimport PropTypes from 'prop-types';\n\n\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {movies && movies.map(({id, title, vote_average, poster_path, release_date }) => (\n          <div key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MoviesItem title={title} poster_path={poster_path} vote_average={vote_average} release_date={release_date} />\n            </Link>\n        </div>\n      ))}\n    </Container>\n  );\n};\n\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};","// import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\n\nconst SearchBar = ({ onSubmit }) => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(() => searchParams.get('quey') ?? '');\n \n  \n  const onChange = e => setSearch(e.target.value);\n  \n  const handleSubmit = event => {\n    event.preventDefault();\n    if (search.trim() === '') {\n      return\n    }\n    onSubmit(search);\n    setSearchParams({ query: search });\n    setSearch('');\n  };\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit}>\n      <input type=\"text\" name=\"search\" onChange={onChange} value={search} autoComplete=\"off\" autoFocus placeholder=\"Search movies\"/>\n      <button type=\"submit\">Search</button>\n    </form>\n  )\n};\n\n// SearchBar.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\nexport default SearchBar","import { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect, } from \"react\";\nimport { fetchBySearchMovies } from \"components/API/API\";\nimport  SearchBar  from \"components/SearchBar/SearchBar\";\nimport { MoviesList } from \"components/MoviesList/MoviesList\";\n\n\nconst Movies = () => {\n\n  const [searchParams] = useSearchParams();\n  const [search, setSearch] = useState(() => searchParams.get('query') ?? '');\n  const [movies, setMovies] = useState(null);\n  \n  // const movieName = searchparams.get(\"query\") ?? \"\";\n\n\n  // const updateQueryString = (name) => {\n  //   const nestParams = name !== \"\" ? { name } : {};\n  //   setSearchparams(nestParams);\n  // };\n\n\n  const handleSubmit = inputValue => {\n    if (inputValue === '') {\n      return alert('Введіть дані для пошуку')\n    }\n    setSearch(inputValue)\n  };\n\n\n  useEffect(() => {\n    if (search === '') {\n      return\n    }\n    fetchBySearchMovies(search).then(data => {\n      setMovies([...data])\n    })\n  }, [search]);\n  // console.log(movies)\n\n\n  return (\n    <main>\n      <SearchBar onSubmit={handleSubmit}  />\n      <MoviesList movies={movies} />\n    </main>\n  )\n};\n\nexport default Movies"],"names":["MoviesItem","poster_path","title","vote_average","release_date","imgUrl","slice","src","alt","MoviesList","movies","location","useLocation","map","id","to","state","from","onSubmit","useSearchParams","searchParams","setSearchParams","useState","get","search","setSearch","action","event","preventDefault","trim","query","type","name","onChange","e","target","value","autoComplete","autoFocus","placeholder","setMovies","useEffect","fetchBySearchMovies","then","data","inputValue","alert"],"sourceRoot":""}