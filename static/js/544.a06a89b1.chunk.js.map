{"version":3,"file":"static/js/544.a06a89b1.chunk.js","mappings":"8SAEMA,EAAM,mCAGL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,kGAEoBC,EAAAA,EAAAA,IAAA,8BAAiCD,EAAjC,oBAAuDF,IAF3E,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gHAQA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2GAAgCC,EAAhC,+BAAuC,EAAvC,kBAEoBJ,EAAAA,EAAAA,IAAA,uCAA0CH,EAA1C,iBAAsDO,EAAtD,iBAFpB,uBAEKH,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,iHAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,oBAAkCT,IAFtD,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gHAQA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA6BD,GAA7B,kGAEoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4BAA0CT,IAF9D,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,EAAKO,MAHT,gHAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,kGAEoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4BAA0CT,IAF9D,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gHAlCPF,EAAAA,EAAAA,SAAAA,QAAyB,8B,2ICCZU,EAAYC,EAAAA,GAAAA,IAAH,mOAYTC,GAAOD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,+MAaJG,EAASH,EAAAA,GAAAA,OAAH,gM,6FC1BNI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,aAAaC,EAAmB,EAAnBA,aAExDC,EADY,kCACOJ,EAIvB,OAHoB,OAAhBA,IACFI,EAAS,2DAGT,iCACE,0BAAKH,EAAM,IAAEE,EAAaE,MAAM,EAAE,OAClC,gBAAKC,IAAKF,EAAQG,IAAKN,KACvB,yBAAG,WAASC,OAGjB,ECTYM,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,UACGF,GAAUA,EAAOG,KAAI,gBAAEtB,EAAF,EAAEA,GAAIW,EAAN,EAAMA,MAAOC,EAAb,EAAaA,aAAcF,EAA3B,EAA2BA,YAAaG,EAAxC,EAAwCA,aAAxC,OAClB,0BACE,SAAC,KAAD,CAAMU,GAAE,kBAAavB,GAAMwB,MAAO,CAAEC,KAAML,GAA1C,UACA,SAACX,EAAD,CAAYE,MAAOA,EAAOD,YAAaA,EAAaE,aAAcA,EAAcC,aAAcA,OAFtFb,EADQ,KAS3B,C,sFCAD,UAhBa,WACX,OAA4B0B,EAAAA,EAAAA,UAAS,IAArC,eAAOP,EAAP,KAAeQ,EAAf,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACR/B,EAAAA,EAAAA,MAAmBgC,MAAK,SAAAlC,GACtBgC,GAAU,OAAIhC,GACf,GACF,GAAE,KAGD,2BACE,SAAC,IAAD,CAAYwB,OAAQA,KAGzB,C","sources":["components/API/API.jsx","components/App.styled.js","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = 'b0cf5ca83b49db6de07ffe10fb9f63bb';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\n\nexport async function fetchBySearchMovies(inputValue) {\n  try {\n    const { data } = await axios.get(`/search/movie?query=${inputValue}&api_key=${KEY}`);\n    return data.results;\n } catch(error) {}\n};\n\n\nexport async function fetchTrendMovies(page = 1) {\n  try {\n    const { data } = await axios.get(`/trending/movie/week?api_key=${KEY}&page=${page}&language=en`);\n    return data.results;\n  }catch(error) {}\n};\n\n\nexport async function fetchById(id) {\n  try {\n    const { data } = await axios.get(`/movie/${id}?api_key=${KEY}`)\n    return data;\n  }catch (error) {}\n};\n\n\nexport async function fetchCastInfo(id) {\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?api_key=${KEY}`)\n    return data.cast;\n  } catch (error) {}\n};\n\n\nexport async function fetchReviews(id) {\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?api_key=${KEY}`)\n    return data.results;\n  } catch (error) {}\n};","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\n\nexport const Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 0 16px;\n  height: 100vh;\n  /* display: flex; */\n  /* justify-content: center; */\n  /* align-items: center; */\n  font-size: 40;\n  color: #010101;\n`;\n\nexport const Link = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 12px;\n  padding: 8px 0;\n  margin-bottom: 16px;\n  border-bottom: 1px solid black;\n`;\n","import PropTypes from \"prop-types\";\n\n\nexport const MoviesItem = ({ poster_path, title, vote_average,release_date }) => {\n  const postImg = 'https://image.tmdb.org/t/p/w500';\n  let imgUrl = postImg + poster_path;\n  if (poster_path === null) {\n    imgUrl = 'https://i.postimg.cc/MTBLYYMP/poster-not-available.jpg';\n  }\n  return (\n    <>\n      <h1>{title} {release_date.slice(0,4)}</h1> \n      <img src={imgUrl} alt={title} />\n      <p>Rating: {vote_average}</p>\n    </>\n );\n};\n\n\nMoviesItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n  poster_path: PropTypes.string,\n};","import { Container } from \"components/App.styled\"\nimport { Link, useLocation } from \"react-router-dom\";\nimport { MoviesItem } from \"../MoviesItem/MoviesItem\";\nimport PropTypes from 'prop-types';\n\n\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {movies && movies.map(({id, title, vote_average, poster_path, release_date }) => (\n          <div key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MoviesItem title={title} poster_path={poster_path} vote_average={vote_average} release_date={release_date} />\n            </Link>\n        </div>\n      ))}\n    </Container>\n  );\n};\n\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};","import { fetchTrendMovies } from \"components/API/API\";\nimport { MoviesList } from \"../../components/MoviesList/MoviesList\";\nimport { useState, useEffect } from \"react\";\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    fetchTrendMovies().then(data => {\n      setMovies([...data]);\n    });\n  }, []);\n  \n  return (\n    <main>\n      <MoviesList movies={movies} />\n    </main>\n  );\n};\n\nexport default Home;"],"names":["KEY","fetchBySearchMovies","inputValue","axios","data","results","fetchTrendMovies","page","fetchById","id","fetchCastInfo","cast","fetchReviews","Container","styled","Link","NavLink","Header","MoviesItem","poster_path","title","vote_average","release_date","imgUrl","slice","src","alt","MoviesList","movies","location","useLocation","map","to","state","from","useState","setMovies","useEffect","then"],"sourceRoot":""}