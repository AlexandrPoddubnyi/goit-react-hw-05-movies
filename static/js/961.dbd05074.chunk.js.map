{"version":3,"file":"static/js/961.dbd05074.chunk.js","mappings":"8SAEMA,EAAM,mCAGL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,kGAEoBC,EAAAA,EAAAA,IAAA,8BAAiCD,EAAjC,oBAAuDF,IAF3E,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gHAQA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2GAAgCC,EAAhC,+BAAuC,EAAvC,kBAEoBJ,EAAAA,EAAAA,IAAA,uCAA0CH,EAA1C,iBAAsDO,EAAtD,iBAFpB,uBAEKH,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,iHAQA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,oBAAkCT,IAFtD,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,gHAQA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA6BD,GAA7B,kGAEoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4BAA0CT,IAF9D,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,EAAKO,MAHT,gHAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BH,GAA5B,kGAEoBN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,4BAA0CT,IAF9D,uBAEKI,EAFL,EAEKA,KAFL,kBAGIA,EAAKC,SAHT,gHAlCPF,EAAAA,EAAAA,SAAAA,QAAyB,8B,qFC8EzB,UAzEqB,WAAO,IAAD,IAEjBM,GAAOI,EAAAA,EAAAA,MAAPJ,GAER,GAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAE7CC,EAAAA,EAAAA,YAAU,YACRb,EAAAA,EAAAA,IAAUC,GAAIa,MAAK,SAAAlB,GACjBY,EAASZ,EACV,GACF,GAAE,CAACK,IAIJ,IAAQc,EAAoER,EAApEQ,MAAOC,EAA6DT,EAA7DS,YAAaC,EAAgDV,EAAhDU,SAAUC,EAAsCX,EAAtCW,OAAQC,EAA8BZ,EAA9BY,aAAaC,EAAiBb,EAAjBa,aAEvDC,EAfY,kCAeOL,EAKvB,OAJoB,OAAhBA,IACAK,EAAS,2DAIX,6BACE,SAAC,KAAD,CAAMC,GAAIb,EAAV,SAAwB,aACxB,4BACE,gBAAKc,IAAKF,EAAQG,IAAKT,KACvB,4BACE,wBAAKA,KACL,wBAAI,aAAcK,GAAgBA,EAAaK,MAAM,EAAG,IACxD,wBAAI,WAAYN,GAAgBA,EAAaO,QAAQ,IACrD,wBAAI,cACJ,uBAAIT,KACJ,wBAAI,aACHC,GAAUA,EAAOS,KAAI,SAAAC,GAAG,OAAIA,EAAIC,IAAR,IAAcC,KAAK,aAGhD,4BACE,wBAAI,0BACJ,2BACE,yBACE,SAAC,KAAD,CAAMR,GAAG,OAAOX,MAAO,CAAEC,KAAMH,GAA/B,SAA+C,YAEjD,yBACE,SAAC,KAAD,CAAMa,GAAG,UAAUX,MAAO,CAAEC,KAAMH,GAAlC,SAAkD,qBAIxD,SAAC,EAAAsB,SAAD,CAAUC,UAAU,yBAAK,eAAzB,UACE,SAAC,KAAD,QAIP,C","sources":["components/API/API.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = 'b0cf5ca83b49db6de07ffe10fb9f63bb';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\n\nexport async function fetchBySearchMovies(inputValue) {\n  try {\n    const { data } = await axios.get(`/search/movie?query=${inputValue}&api_key=${KEY}`);\n    return data.results;\n } catch(error) {}\n};\n\n\nexport async function fetchTrendMovies(page = 1) {\n  try {\n    const { data } = await axios.get(`/trending/movie/week?api_key=${KEY}&page=${page}&language=en`);\n    return data.results;\n  }catch(error) {}\n};\n\n\nexport async function fetchById(id) {\n  try {\n    const { data } = await axios.get(`/movie/${id}?api_key=${KEY}`)\n    return data;\n  }catch (error) {}\n};\n\n\nexport async function fetchCastInfo(id) {\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?api_key=${KEY}`)\n    return data.cast;\n  } catch (error) {}\n};\n\n\nexport async function fetchReviews(id) {\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?api_key=${KEY}`)\n    return data.results;\n  } catch (error) {}\n};","// import { PropTypes} from \"prop-types\";\nimport { Link, Outlet, useParams } from \"react-router-dom\";\nimport { useEffect,useState,Suspense } from \"react\";\nimport { fetchById } from \"components/API/API\";\nimport { useLocation } from \"react-router-dom\";\n// import PropTypes from 'prop-types';\n\n\nconst MovieDetails = () => {\n\n  const { id } = useParams();\n  const postImg = 'https://image.tmdb.org/t/p/w500';\n  const [movie, setMovie] = useState('');\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  \n  useEffect(() => {\n    fetchById(id).then(data => {\n      setMovie(data);\n    });\n  }, [id]);\n\n \n  \n  const { title, poster_path, overview, genres, vote_average,release_date } = movie;\n\n  let imgUrl = postImg + poster_path;\n  if (poster_path === null) {\n      imgUrl = 'https://i.postimg.cc/MTBLYYMP/poster-not-available.jpg';\n  };\n\n  return (\n    <main>\n      <Link to={backLinkHref}>Go back</Link>\n      <div>\n        <img src={imgUrl} alt={title} />\n        <div>\n          <h1>{title}</h1>\n          <h3>Release </h3>{release_date && release_date.slice(0, 4)}\n          <h3>Rating</h3>{vote_average && vote_average.toFixed(1)}\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres: </h3>\n          {genres && genres.map(gen => gen.name).join(', ')}\n        </div>\n      </div>\n      <div>\n        <h3>Aditional iformation</h3>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: backLinkHref }}>Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: backLinkHref }}>Reviews</Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\n\n\n// MovieDetails.propTypes = {\n//   movie: PropTypes.shape({\n//     title: PropTypes.string.isRequired,\n//     id: PropTypes.number.isRequired,\n//     vote_average: PropTypes.number.isRequired,\n//     poster_path: PropTypes.string,\n//     genres: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.number.isRequired,\n//         name: PropTypes.string.isRequired\n//       })\n//     )\n//   })\n// };\n     \nexport default MovieDetails"],"names":["KEY","fetchBySearchMovies","inputValue","axios","data","results","fetchTrendMovies","page","fetchById","id","fetchCastInfo","cast","fetchReviews","useParams","useState","movie","setMovie","backLinkHref","useLocation","state","from","useEffect","then","title","poster_path","overview","genres","vote_average","release_date","imgUrl","to","src","alt","slice","toFixed","map","gen","name","join","Suspense","fallback"],"sourceRoot":""}